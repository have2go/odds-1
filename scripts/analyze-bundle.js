const fs = require('fs').promises;
const path = require('path');

async function analyzeBundleSize() {
    console.log('üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–∞–∑–º–µ—Ä –±–∞–Ω–¥–ª–∞...\n');
    
    const buildDir = path.join(process.cwd(), '.next');
    const staticDir = path.join(buildDir, 'static');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ build –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        await fs.access(buildDir);
        
        async function getDirectorySize(dirPath) {
            let totalSize = 0;
            const items = await fs.readdir(dirPath, { withFileTypes: true });
            
            for (const item of items) {
                const fullPath = path.join(dirPath, item.name);
                if (item.isDirectory()) {
                    totalSize += await getDirectorySize(fullPath);
                } else {
                    const stat = await fs.stat(fullPath);
                    totalSize += stat.size;
                }
            }
            return totalSize;
        }
        
        async function analyzeChunks() {
            const chunksDir = path.join(staticDir, 'chunks');
            try {
                const chunks = await fs.readdir(chunksDir);
                const jsChunks = chunks.filter(f => f.endsWith('.js'));
                
                const chunkSizes = [];
                for (const chunk of jsChunks) {
                    const stat = await fs.stat(path.join(chunksDir, chunk));
                    chunkSizes.push({ name: chunk, size: stat.size });
                }
                
                chunkSizes.sort((a, b) => b.size - a.size);
                
                console.log('üì¶ –ö—Ä—É–ø–Ω–µ–π—à–∏–µ —á–∞–Ω–∫–∏:');
                for (const chunk of chunkSizes.slice(0, 10)) {
                    const sizeKB = (chunk.size / 1024).toFixed(1);
                    console.log(`   ${chunk.name}: ${sizeKB}KB`);
                }
                
                return chunkSizes.reduce((sum, chunk) => sum + chunk.size, 0);
            } catch (error) {
                console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–∞–Ω–∫–∏');
                return 0;
            }
        }
        
        const totalBuildSize = await getDirectorySize(buildDir);
        const chunksSize = await analyzeChunks();
        
        console.log('\nüìè –†–∞–∑–º–µ—Ä—ã:');
        console.log(`   –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –±–∏–ª–¥–∞: ${(totalBuildSize / 1024 / 1024).toFixed(2)}MB`);
        console.log(`   –†–∞–∑–º–µ—Ä JS —á–∞–Ω–∫–æ–≤: ${(chunksSize / 1024).toFixed(1)}KB`);
        
        // –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∞—Å—Å–µ—Ç–æ–≤
        try {
            const publicDir = path.join(process.cwd(), 'public');
            const publicSize = await getDirectorySize(publicDir);
            console.log(`   –†–∞–∑–º–µ—Ä —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤: ${(publicSize / 1024 / 1024).toFixed(2)}MB`);
        } catch (error) {
            console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å public –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é');
        }
        
    } catch (error) {
        console.log('‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–±–æ—Ä–∫—É –ø—Ä–æ–µ–∫—Ç–∞: npm run build');
    }
}

analyzeBundleSize();
